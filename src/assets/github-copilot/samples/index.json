[
  {
    "name": "Phodal's Tips",
    "author": "Phodal Huang",
    "category": "programming",
    "homepage": "https://www.phodal.com",
    "snippets": [
      {
        "name": "函数名 + 输入 + 输出自动填充",
        "prompt": "```javascript\nfunction listAllFileUnderDist(\n```\n",
        "result": "```javascript\nfunction listAllFileUnderDist() {\n  const distDir = path.join(__dirname, \"../dist\");\n  const files = walkdir.sync(distDir, { no_recurse: true });\n  const index = files.map((f) => {\n  return path.relative(distDir, f);\n});\n  fs.writeFileSync(path.join(distDir, \"index.json\"), JSON.stringify(index, null, 2));\n}\n```\n"
      },
      {
        "name": "数据转换",
        "prompt": "```typescript\n// for generated by @GitHubCopilot\n// sample data:\n// Prompt: particle effects small breasts, 1 girl, solo\n// Negative prompt: obese, (ugly:1.3), (duplicate:1.3), (morbid)\n// Steps: 20, Sampler: Euler a, CFG scale: 7, Seed: 1338233768, Size: 512x512, Model hash: f773383dbc, Model: anything-v4.5-pruned-fp16\nexport function parseStableDiffusionData(prompt: string): StableDiffusionGenData {\n```\n",
        "result": "```typescript\nexport function parseStableDiffusionData(prompt: string): StableDiffusionGenData {\n  ...\n}\n```\n"
      },
      {
        "name": "按步骤设计",
        "prompt": "```typescript\n// 1. split promptMatch by comma\n// 2. match lora name by regex, lora full name: <lora:japaneseDollLikeness_v10:0.1>,\n// 3. push lora name to loras array\n```\n",
        "result": "```typescript\nconst loras = promptMatch[1]\n  .split(\",\")\n  .map((item) => {\n  const match = item.match(/<lora:(.+):.+/);\n    return match ? match[1] : \"\";\n})\n  .filter((item) => item !== \"\");\n```\n"
      },
      {
        "name": "编程语言间翻译",
        "prompt": "使用注释复制其它语言的代码，如输入 TypeScript，输出语言是 Kotlin\n```typescript\n//  async checkout(ref: string, startPoint: string): Promise<void> {\n//    const args = ['checkout', '--progress', '--force']\n//    if (startPoint) {\n//      args.push('-B', ref, startPoint)\n//    } else {\n//      args.push(ref)\n//    }\n//\n//    await this.execGit(args)\n//  }\nfun checkout...\n```\n",
        "result": "```kotlin\n fun checkout(ref: String, startPoint: String): Promise<Unit> {\n  val args = mutableListOf(\"checkout\", \"--progress\", \"--force\")\n  if (startPoint != null) {\n    args.add(\"-B\")\n    args.add(ref)\n    args.add(startPoint)\n  } else {\n    args.add(ref)\n  }\n  return execGit(args)\n}\n```\n"
      },
      {
        "name": "测试用例生成",
        "prompt": "```kotlin\n@Test\nfun `test command manager git branch list`() {\n```\n",
        "result": "```kotlin\n@Test\n  fun `test command manager git branch list`() {\n  val output = gitCommandManager.branchList(false)\n  output.contains(\"master\") shouldBe true\n  val branchList = gitCommandManager.parseBranchList(listOf(\"refs/heads/master\"))\n  branchList.contains(\"refs/heads/master\") shouldBe false\n  branchList.contains(\"master\") shouldBe true\n}\n```\n"
      },
      {
        "name": "批量操作",
        "prompt": "```typescript\n// convert navList with i18n keys to navList with i18n values\n// {\n//   \"chatgpt-general\": \"ChatGPT 常用指令\",\n//   \"chatgpt-prompt-role-play\": \"ChatGPT 角色扮演\",\n//   \"chatgpt-generator-cot\": \"ChatGPT 思维链模式\",\n//   \"chatgpt-interactive-game\": \"ChatGPT 交互式游戏\",\n//   \"chatgpt-samples\": \"ChatGPT 示例\",\n//   \"chatgpt\": \"ChatGPT 聊天室\",\n//   \"stable-diffusion-examples\": \"StableDiffusion 示例\",\n//   \"stable-diffusion-generator\": \"AI 绘画生成器\",\n//   \"github-copilot-samples\": \"GitHub Copilot 示例\",\n//   \"resources\": \"学习资料\",\n// }\nconst navList = [\n{\ntitle: \"ChatGPT\",\n```\n",
        "result": "```typescript\nconst navList = [\n  {\n    title: \"ChatGPT\",\n    children: [\n      { url: `/chatgpt-general/`, title: dict.all[\"chatgpt-general\"] },\n      { url: `/chatgpt-prompt-role-play/`, title: dict.all[\"chatgpt-prompt-role-play\"] },\n      { url: `/chatgpt-generator-cot/`, title: dict.all[\"chatgpt-generator-cot\"] },\n      { url: `/chatgpt-interactive-game/`, title: dict.all[\"chatgpt-interactive-game\"] },\n      { url: `/chatgpt-samples/`, title: dict.all[\"chatgpt-samples\"] },\n      { url: `/chatgpt/`, title: dict.all[\"chatgpt\"] },\n    ],\n  }\n]\n```\n"
      },
      {
        "name": "翻译",
        "prompt": "```typescript\n// {\n//   \"chatgpt-general\": \"ChatGPT 常用指令\",\n//   \"chatgpt-prompt-role-play\": \"ChatGPT 角色扮演\",\n//   \"chatgpt-generator-cot\": \"ChatGPT 思维链模式\",\n//   \"chatgpt-interactive-game\": \"ChatGPT 交互式游戏\",\n//   \"chatgpt-samples\": \"ChatGPT 示例\",\n//   \"chatgpt\": \"ChatGPT 聊天室\",\n//   \"stable-diffusion-examples\": \"StableDiffusion 示例\",\n//   \"stable-diffusion-generator\": \"AI 绘画生成器\",\n//   \"github-copilot-samples\": \"GitHub Copilot 示例\",\n//   \"resources\": \"学习资料\",\n// }\n// translate to English\n```\n",
        "result": "```typescript\n// {\n//   \"chatgpt-general\": \"ChatGPT General\",\n//   \"chatgpt-prompt-role-play\": \"ChatGPT Role Play\",\n//   \"chatgpt-generator-cot\": \"ChatGPT Generator COT\",\n//   \"chatgpt-interactive-game\": \"ChatGPT Interactive Game\",\n//   \"chatgpt-samples\": \"ChatGPT Samples\",\n//   \"chatgpt\": \"ChatGPT\",\n//   \"stable-diffusion-examples\": \"StableDiffusion Examples\",\n//   \"stable-diffusion-generator\": \"StableDiffusion Generator\",\n//   \"github-copilot-samples\": \"GitHub Copilot Samples\",\n//   \"resources\": \"Resources\",\n// }\n```\n"
      },
      {
        "name": "国际化",
        "prompt": "```typescript\n// const ROLES = [\"天才\", \"豪门弃子\", \"修炼废物\", \"冒险家\", \"孤儿\", \"情圣\", \"幸运儿\", \"强者\", \"屌丝\", \"学者\"];\n// translate to i18n ,like: \"天才\" -> t(\"genius\"), and use Output variable to save key-value: {\"genius\": \"天才\"}\nconst ROLES = [t(\"genius\")\n```\n",
        "result": "```typescript\n// const ROLES = [\"天才\", \"豪门弃子\", \"修炼废物\", \"冒险家\", \"孤儿\", \"情圣\", \"幸运儿\", \"强者\", \"屌丝\", \"学者\"];\n// translate to i18n ,like: \"天才\" -> t(\"genius\"), and use Output variable to save key-value: {\"genius\": \"天才\"}\nconst ROLES = [t(\"genius\"), t(\"rich\"), t(\"waste\"), t(\"adventurer\"), t(\"orphan\"), t(\"playboy\"), t(\"lucky\"), t(\"strong\"), t(\"loser\"), t(\"scholar\")];\nconst Output = { \"genius\": \"天才\", \"rich\": \"豪门弃子\", \"waste\": \"修炼废物\", \"adventurer\": \"冒险家\", \"orphan\": \"孤儿\", \"playboy\": \"情圣\", \"lucky\": \"幸运儿\", \"strong\": \"强者\", \"loser\": \"屌丝\", \"scholar\": \"学者\" };\n```\n"
      }
    ],
    "path": "phodal-tips.yml"
  }
]