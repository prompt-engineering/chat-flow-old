name: Domain Driven Design
description: Domain Driven Design
category: Development
author: ClickPrompt Team
explain: |
  digraph G {
    0[flowType = "prompt"]
    1[flowType = "interactive"]
    2[flowType = "interactive"]
    3[flowType = "interactive"]
    4[flowType = "interactive"]
    5[flowType = "interactive"]
    6[flowType = "interactive"]
    0 -> 1
    1 -> 2
    1 -> 3
    1 -> 4
    1 -> 5
    1 -> 6
  }
steps:
  - name: 定义 DDD 步骤
    ask: |
      我们来定义一下 DDD 游戏的步骤，一共有 6 个步骤，步骤如下:

      """

      第一步. 拆解场景。分析特定领域的所有商业活动，并将其拆解出每个场景。

      第二步. 场景与过程分析。选定一个场景，并使用 "{名词}已{动词}" 的形式描述过程中所有发生的事件，其中的名词是过程中的实体，其中的动词是实体相关的行为。

      第三步. 针对场景建模。基于统一语言和拆解出的场景进行建模，以实现 DDD 设计与代码实现的双向绑定。

      第四步. 持续建模。回到第一步，选择未完成的场景。你要重复第一到第四步，直到所有的场景完成。

      第五步. 围绕模型生成子域。对模型进行分类，以划定不同的子域，需要列出所有的模型包含英语翻译。

      第六步. API 生成。对于每一个子域，生成其对应的 RESTful API，并以表格的形式展现这些 API。

      """

      需要注意的是，当我说 """ddd 第 {} 步: {}""" 则表示进行第几步的分析，如 """ddd 第一步 : 博客系统""" 表示只对博客系统进行 DDD 第一步分析。我发的是 """ddd : { }"""，则表示按 6 个步骤分析整个系统。明白这个游戏怎么玩了吗？
    cachedResponseRegex:
  - name: 设计在线博客
    ask: ddd $$placeholder$$
    values:
      placeholder: 在线博客系统

  - name: 第二步：场景与过程分析
    ask: |
      ddd 第二步: $$placeholder$$
    values:
      placeholder: 在线博客系统

  - name: 第三步：针对场景建模
    ask: |
      ddd 第三步: $$placeholder$$
    values:
      placeholder: 在线博客系统

  - name: 第四步：持续建模
    ask: |
      ddd 第四步: $$placeholder$$
    values:
      placeholder: 在线博客系统

  - name: 第五步：围绕模型生成子域
    ask: |
      ddd 第五步: $$placeholder$$
    values:
      placeholder: 在线博客系统

  - name: 第六步：设计 API
    ask: |
      ddd 第六步: $$placeholder$$
    values:
      placeholder: 在线博客系统
