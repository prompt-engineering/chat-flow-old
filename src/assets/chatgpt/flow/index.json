[
  {
    "name": "ClickPrompt Workflow",
    "category": "Development",
    "description": "ClickPrompt GitHub Workflow for development ClickFlow",
    "steps": [
      {
        "name": "上下文准备",
        "ask": "我们是 ClickPrompt 开源项目的贡献者，在对话继续之前请阅读一下这些资料：\n\n- ClickPrompt 是一款专为 Prompt 编写者设计的工具，它支持多种基于 Prompt 的 AI 应用，例如 Stable Diffusion、ChatGPT 和 GitHub Copilot 等。 使用 ClickPrompt，您可以轻松地查看、分享和一键运行这些模型，同时提供在线的 Prompt 生成器，使用户能够根据自己的需求轻松创建符合要求的 Prompt，并与其他人分享。\n- ClickPrompt 包含了些页面组件：chatgpt、chatgpt-general、chatgpt-generator-cot、chatgpt-interactive-game、chatgpt-prompt-role-play、chatgpt-samples、click-flow、github-copilot-samples、resources、stable-diffusion-examples、stable-diffusion-generator\n- ClickPrompt 使用 Next.js、React、Chakra UI、Tailwind 等作为主要的开发框架，使用 Planetscale 作为数据库。\n\n阅读完毕后，请回复 OK。\n"
      },
      {
        "name": "分析问题",
        "ask": "在 ClickPrompt 上，有一个用户反馈了一个问题，帮我分析一下他的问题原因可能是什么？\n\n$$issue$$\n",
        "preActions": [
          {
            "name": "Fetch issue",
            "type": "api",
            "api": {
              "url": "https://api.github.com/repos/prompt-engineering/chat-flow/issues",
              "method": "GET",
              "headers": [
                {
                  "key": "Accept",
                  "value": "application/vnd.github+json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer ${{ GITHUB_TOKEN }}"
                }
              ]
            },
            "postProcess": [
              {
                "function": "jsonPath",
                "args": [
                  "$.0.body"
                ],
                "outputVar": "issues"
              }
            ],
            "postComponents": [
              {
                "name": "JsonViewer",
                "args": "issues"
              }
            ]
          }
        ],
        "values": {
          "issue": "$$issue$$"
        }
      },
      {
        "name": "创建需求",
        "ask": "我们想在 ClickPrompt 上添加一个新的需求： $$placeholder$$，请帮我写一个需求的 issue。\n\n要求：输出需求的格式如下：\n\n\"\"\"\n**Is your feature request related to a problem? Please describe.**\n\nNo\n\n**Describe the solution you'd like**\n\nA clear and concise description of what you want to happen.\n\n**Describe alternatives you've considered**\n\nA clear and concise description of any alternative solutions or features you've considered.\n\n**Additional context**\n\nAdd any other context or screenshots about the feature request here.\n\"\"\"\n\n请按照格式输出需求。\n",
        "markdownEditor": true,
        "cachedResponseRegex": null,
        "values": {
          "placeholder": "在 ClickPrompt 上使用 ChatGPT 自动创建 GitHub issue，以便于社区贡献者能更好的理解这个需求"
        },
        "postActions": [
          {
            "name": "Create issue",
            "type": "api",
            "api": {
              "url": "https://api.github.com/repos/prompt-engineering/chat-flow/issues",
              "method": "POST",
              "headers": [
                {
                  "key": "Accept",
                  "value": "application/vnd.github+json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer ${{ GITHUB_TOKEN }}"
                }
              ],
              "body": {
                "title": "Add ChatGPT for ClickPrompt",
                "body": "$$response$$",
                "assignees": [],
                "milestone": null,
                "labels": []
              }
            }
          }
        ]
      },
      {
        "name": "初步代码生成",
        "ask": "我要使用 $$placeholder$$，帮我生成代码吧。\n",
        "markdownEditor": true,
        "values": {
          "placeholder": "node-fetch 结合 GitHub issue 来自动化创建 issue"
        }
      },
      {
        "name": "CodeReview",
        "ask": "作为 Pull Request 的代码审查者，需对下列代码变更提供反馈。提供的变更以补丁形式呈现，每个补丁条目包含提交信息（Subject line）和以 unidiff 格式显示的代码变更（diffs）。\n\n要求：\n\n- 审查补丁中的代码变更（diffs）并提供反馈。\n- 如果有任何错误，请指出。\n- 代码是否按照提交信息中所述执行？\n- 不要强调小问题和琐碎问题。\n- 如果有多个评论，请使用项目符号。\n\n要审查的 Pull Request 补丁如下：\n\n$$patch$$\n",
        "markdownEditor": true,
        "values": {
          "patch": "```git\nFrom 90d3e91b35cf503c1bda1695051101904db29e54 Mon Sep 17 00:00:00 2001\nFrom: CGQAQ <m.jason.liu@outlook.com>\nDate: Mon, 13 Mar 2023 17:15:42 +0800\nSubject: [PATCH] feat: Clear conversations\n\n---\nsrc/storage/planetscale.ts            | 10 ++++++++++\n1 files changed, 10 insertions(+), 0 deletion(-)\n\n--- a/src/storage/planetscale.ts\n  +++ b/src/storage/planetscale.ts\n  @@ -122,6 +122,16 @@ export const deleteConversation = cache(async (conversationId: number) => {\n       .execute();\n});\n\n+export const deleteAllConversationsByUserId = cache(async (userId: number) => {\n+  return queryBuilder\n+    .updateTable(\"conversations\")\n+    .set({\n   +      deleted: 1,\n+    })\n+    .where(\"conversations.user_id\", \"=\", userId)\n+    .execute();\n+});\n+\n   export const getUserByKeyHashed = cache(async (keyHashed: string) => {\n     const result = await queryBuilder\n     .selectFrom(\"users\")\n--\n2.39.2\n```\n"
        },
        "cachedResponseRegex": null
      },
      {
        "name": "线上问题分析",
        "ask": "帮我分析一下这个问题的原因是什么？\n\n$$placeholder$$\n",
        "markdownEditor": true,
        "values": {
          "placeholder": "```bash\nDatabaseError: target: chat-flow.-.primary: vttablet: rpc error: code = InvalidArgument desc = Data too long for column 'key_encrypted' at row 1 (errno 1406) (sqlstate 22001) (CallerID: 2lu2zsztxccwigrmdi7w): Sql: \"insert into users(iv, key_hashed, key_encrypted) values (:vtg1, :vtg2, :vtg3)\", BindVars: {REDACTED}\n    at Connection.execute (/var/task/.next/server/chunks/9212.js:182:19)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at async _PlanetScaleConnection.executeQuery (/var/task/.next/server/chunks/9212.js:408:21)\n    at async /var/task/node_modules/kysely/dist/cjs/query-executor/query-executor-base.js:37:28\n    at async DefaultConnectionProvider.provideConnection (/var/task/node_modules/kysely/dist/cjs/driver/default-connection-provider.js:12:20)\n    at async DefaultQueryExecutor.executeQuery (/var/task/node_modules/kysely/dist/cjs/query-executor/query-executor-base.js:36:16)\n    at async InsertQueryBuilder.execute (/var/task/node_modules/kysely/dist/cjs/query-builder/insert-query-builder.js:486:24)\n    at async handler (/var/task/.next/server/chunks/1407.js:70:21)\n    at async Object.apiResolver (/var/task/node_modules/next/dist/server/api-utils/node.js:372:9)\n    at async NextNodeServer.runApi (/var/task/node_modules/next/dist/server/next-server.js:513:9) {\n  status: 400,\n  body: {\n    message: `target: chat-flow.-.primary: vttablet: rpc error: code = InvalidArgument desc = Data too long for column 'key_encrypted' at row 1 (errno 1406) (sqlstate 22001) (CallerID: 2lu2zsztxccwigrmdi7w): Sql: \"insert into users(iv, key_hashed, key_encrypted) values (:vtg1, :vtg2, :vtg3)\", BindVars: {REDACTED}`,\n    code: 'UNKNOWN'\n  }\n}\nRequestId: d344e3fe-f438-4126-8017-f83e7104d07a Error: Runtime exited with error: exit status 1\nRuntime.ExitError\n```\n"
        }
      }
    ],
    "author": "Phodal Huang",
    "path": "click-flow.yml"
  },
  {
    "name": "Code Review",
    "category": "Development",
    "description": "在这个示例中，我们将会展示如何使用 ChatGPT 进行代码审查。",
    "steps": [
      {
        "name": "Code Review",
        "ask": "作为 Pull Request 的代码审查者，需对下列代码变更提供反馈。提供的变更以补丁形式呈现，每个补丁条目包含提交信息（Subject line）和以 unidiff 格式显示的代码变更（diffs）。\n\n要求：\n\n- 审查补丁中的代码变更（diffs）并提供反馈。\n- 如果有任何错误，请指出。\n- 代码是否按照提交信息中所述执行？\n- 不要强调小问题和琐碎问题。\n- 如果有多个评论，请使用项目符号。\n\n要审查的 Pull Request 补丁如下：\n\n$$patch$$\n",
        "values": {
          "patch": "From 90d3e91b35cf503c1bda1695051101904db29e54 Mon Sep 17 00:00:00 2001\nFrom: CGQAQ <m.jason.liu@outlook.com>\nDate: Mon, 13 Mar 2023 17:15:42 +0800\nSubject: [PATCH] feat: Clear conversations\n\n---\nsrc/storage/planetscale.ts            | 10 ++++++++++\n1 files changed, 10 insertions(+), 0 deletion(-)\n\n--- a/src/storage/planetscale.ts\n  +++ b/src/storage/planetscale.ts\n  @@ -122,6 +122,16 @@ export const deleteConversation = cache(async (conversationId: number) => {\n       .execute();\n});\n\n+export const deleteAllConversationsByUserId = cache(async (userId: number) => {\n+  return queryBuilder\n+    .updateTable(\"conversations\")\n+    .set({\n   +      deleted: 1,\n+    })\n+    .where(\"conversations.user_id\", \"=\", userId)\n+    .execute();\n+});\n+\n   export const getUserByKeyHashed = cache(async (keyHashed: string) => {\n     const result = await queryBuilder\n     .selectFrom(\"users\")\n--\n2.39.2\n"
        },
        "cachedResponseRegex": null
      }
    ],
    "author": "Phodal Huang",
    "path": "code-review.yml"
  },
  {
    "name": "软件系统设计",
    "category": "Development",
    "description": "在这个示例中，我们将会使用 ChatGPT 分析系统，编写软件系统设计。",
    "steps": [
      {
        "name": "创建系统设计 \"函数\"",
        "ask": "我们来设计一个流程，名为: system，其用于软件系统设计。我们会把设计分为两部分：\n\n第一部分，当我用 \"design:{}\" 发给你需求时，你需要：\n\n1. 分析所有潜在的对应场景，分析用户旅程。\n2. 使用 Mermaid 绘制 User Journey Diagram，并只返回 Mermaid 的 User Journey Diagram 代码，最后返回示例如：\n\n```mermaid\njourney\n  title My working day\n  section Go to work\n    Make tea: 5: Me\n    Go upstairs: 3: Me\n    Do work: 1: Me, Cat\n  section Go home\n    Go downstairs: 5: Me\n    Sit down: 5: Me\n```\n\n第二部分，我会用 \"system({}):{}\" 的形式发给你设计需求，示例：\"system(\"API\"): 博客系统\"，表示上面格式中的 API 部分。要求如下：\n\n1. 你需要考虑围绕这一类型系统的所有场景。\n2. 使用如下的 DSL 格式来描述系统：\n\n```\nSystem(\"BlogSystem\") {\n  Entities {\n    Blog { title: string, ..., comments: [Comment]? },\n    Comment { ...}\n  }\n  Operation {\n    Ops(\"CreateBlog\", {\n     in: { title: string, description: string },\n     out: { id: number }\n     pre: title is unique and (title.length > 5 && title.length < 120)\n     post: id is not null\n    })\n  }\n  API {\n    Route(path: String, method: HttpMethod operation: Operation)\n  }\n}\n```\n\n明白吗？明白就返回：OK。\n",
        "cachedResponseRegex": null
      },
      {
        "name": "设计用户旅程",
        "ask": "design: $$placeholder$$, 使用 Mermaid 绘制 User Journey Diagram，并只返回 Mermaid 的 User Journey Diagram 代码，返回格式如：\"\"\"```mermaid journey{}\"\"\"。\n",
        "values": {
          "placeholder": "在线博客系统"
        },
        "cachedResponseRegex": ".*"
      },
      {
        "name": "分析系统，绘制 Entities 图",
        "ask": "system(\"Entities\"): $$placeholder$$，返回 Mermaid 类图。\n",
        "values": {
          "placeholder": "在线博客系统"
        },
        "cachedResponseRegex": ".*"
      },
      {
        "name": "分析系统，绘制 Operation 图",
        "ask": "system(\"Operation\"): $$placeholder$$，只返回 Operation 部分。\n",
        "values": {
          "placeholder": "在线博客系统"
        },
        "cachedResponseRegex": ".*"
      },
      {
        "name": "分析系统，绘制 API 表格",
        "ask": "system(\"API\"): $$placeholder$$，只返回 API 部分，并使用表格绘制。\n",
        "values": {
          "placeholder": "在线博客系统"
        },
        "cachedResponseRegex": ".*"
      }
    ],
    "author": "Phodal Huang",
    "path": "design-software-system.yml"
  },
  {
    "name": "Domain Driven Design",
    "category": "Development",
    "description": "Domain Driven Design",
    "steps": [
      {
        "name": "定义 DDD 步骤",
        "ask": "我们来定义一下 DDD 游戏的步骤，一共有 6 个步骤，步骤如下:\n\n\"\"\"\n\n第一步. 拆解场景。分析特定领域的所有商业活动，并将其拆解出每个场景。\n\n第二步. 场景与过程分析。选定一个场景，并使用 \"{名词}已{动词}\" 的形式描述过程中所有发生的事件，其中的名词是过程中的实体，其中的动词是实体相关的行为。\n\n第三步. 针对场景建模。基于统一语言和拆解出的场景进行建模，以实现 DDD 设计与代码实现的双向绑定。\n\n第四步. 持续建模。回到第一步，选择未完成的场景。你要重复第一到第四步，直到所有的场景完成。\n\n第五步. 围绕模型生成子域。对模型进行分类，以划定不同的子域，需要列出所有的模型包含英语翻译。\n\n第六步. API 生成。对于每一个子域，生成其对应的 RESTful API，并以表格的形式展现这些 API。\n\n\"\"\"\n\n需要注意的是，当我说 \"\"\"ddd 第 {} 步: {}\"\"\" 则表示进行第几步的分析，如 \"\"\"ddd 第一步 : 博客系统\"\"\" 表示只对博客系统进行 DDD 第一步分析。我发的是 \"\"\"ddd : { }\"\"\"，则表示按 6 个步骤分析整个系统。明白这个游戏怎么玩了吗？\n",
        "cachedResponseRegex": null
      },
      {
        "name": "设计在线博客",
        "ask": "ddd $$placeholder$$",
        "values": {
          "placeholder": "在线博客系统"
        }
      },
      {
        "name": "第二步：场景与过程分析",
        "ask": "ddd 第二步: $$placeholder$$\n",
        "values": {
          "placeholder": "在线博客系统"
        }
      },
      {
        "name": "第三步：针对场景建模",
        "ask": "ddd 第三步: $$placeholder$$\n",
        "values": {
          "placeholder": "在线博客系统"
        }
      },
      {
        "name": "第四步：持续建模",
        "ask": "ddd 第四步: $$placeholder$$\n",
        "values": {
          "placeholder": "在线博客系统"
        }
      },
      {
        "name": "第五步：围绕模型生成子域",
        "ask": "ddd 第五步: $$placeholder$$\n",
        "values": {
          "placeholder": "在线博客系统"
        }
      },
      {
        "name": "第六步：设计 API",
        "ask": "ddd 第六步: $$placeholder$$\n",
        "values": {
          "placeholder": "在线博客系统"
        }
      }
    ],
    "author": "ClickPrompt Team",
    "path": "domain-driven-design.yml"
  },
  {
    "name": "User Story",
    "category": "Development",
    "description": "This \"step by step\" interaction example will show how to combine ChatGPT to analyze requirements and write user stories? Analyze user stories, write test cases? Analyze user stories, write code?",
    "steps": [
      {
        "name": "Create game",
        "ask": "We're going to play a game called 'story'. In this game, I will give you a vague requirement, and you need to:\n\n1. Analyze the requirement and write user stories using the 'Invest' principle, but you don't need to return them to me.\n2. Write clear acceptance criteria for the user stories using the 'Given-When-Then' format as much as possible, but you don't need to return them to me.\n3. Finally, return the title, content, and acceptance criteria of the user stories in the following format:\n\n\"\"\"\nTitle: {}\nContent: {}\nAcceptance Criteria:\n\n1. AC01 {}\n\n   When {}\n\n   Then {}\n\n2. AC02 {}\n\n   When {}\n\n   Then {}\n\"\"\"\n\nWhen I say 'story: {}', we'll start the game. Do you know how to play this game? If you do, please reply with 'OK' only.\n",
        "cachedResponseRegex": null
      },
      {
        "name": "Analyze requirements and write user stories",
        "ask": "story: $$placeholder$$\n",
        "cachedResponseRegex": ".*",
        "values": {
          "placeholder": "user login\n"
        }
      },
      {
        "name": "Mermaid sequence diagram",
        "ask": "I will give you a vague requirement, and you need to:\n\n1. Analyze and refine the requirement, but you don't need to return the result to me.\n2. Use Mermaid to draw a sequence diagram, but you don't need to return it to me.\n3. Finally, only return the Mermaid code, like：\"\"\"```mermaid  graph {}```\"\"\", nothing else.\n\nThe requirement is as follows:\n\n\"\"\"\n$$response:1$$\n\"\"\"\n"
      },
      {
        "name": "Analyze user stories and write test cases",
        "ask": "I will give you a requirement, and you need to:\n\n1. Analyze the requirement, but you don't need to return the result to me.\n2. Use Java + Spring + MockMVC to write test cases, where the comments in the code correspond to AC01, AC02, AC03, AC04, AC05, but you don't need to return it to me.\n3. Finally, only return the Java code, nothing else.\n\nThe requirement is as follows:\n\n\"\"\"\n$$response:1$$\n\"\"\"\n",
        "cachedResponseRegex": null
      },
      {
        "name": "Analyze user stories and write test code",
        "ask": "I will give you a requirement, and you need to analyze the requirement and write API using Java + Spring. The requirements are as follows:\n\n1. Remove any unnecessary UI interaction code and only return the corresponding code.\n2. Use comments within the method to explain how the implementation works.\n3. Finally, you will only return the code to me, in the specified format.\n\n```java\n// {}\n@PostMapping({})\npublic void main(String args[])\n{\n  // {}\n}\n```\n\nThe requirement is as follows:\n\n\"\"\"\n$$response:1$$\n\"\"\"\n",
        "cachedResponseRegex": null
      }
    ],
    "author": "Phodal Huang",
    "path": "user-story-en.yml"
  },
  {
    "name": "模糊的需求到代码骨架",
    "category": "Development",
    "description": "这个 \"逐步运行\" 交互示例将会展示，如何结合 ChatGPT 分析需求，编写用户故事？分析用户故事，编写测试用例？分析用户故事，编写代码？",
    "steps": [
      {
        "name": "创建需求游戏",
        "ask": "我们来玩一个名为 story 的游戏，在这个游戏里，我会给你一个模糊的需求，你需要：\n\n1. 分析需求，并使用用户故事和 Invest 原则编写用户故事卡，但是不需要返回给我。\n2. 尽可能写清楚用户故事的验收条件，验收条件 Given When Then 的表达方式，但是不需要返回给我。\n3. 最后返回用户故事的标题，内容，验收条件，格式如下：\n\n\"\"\"\n\n标题：{}\n\n内容：{}\n\n验收条件：\n\n1. AC01 {}\n    - When {}\n    - Then {}\n2. AC02 {}\n    - When {}\n    - Then {}\n\n\"\"\"\n\n当我说 \"\"\"story: {}\"\"\" ，咱们开始游戏。知道这个游戏怎么玩吗？知道的话，请只回复：OK\n",
        "cachedResponseRegex": null
      },
      {
        "name": "分析需求，编写用户故事",
        "ask": "story: $$placeholder$$\n",
        "cachedResponseRegex": ".*",
        "values": {
          "placeholder": "用户通过主菜单进入“权限管理”模块，选择“账号管理”Tab页，可以看到“新增账号”按钮。\n点击“新增账号”按钮，系统弹出新增账号窗口（可能还会写一句“背景置灰”）。\n用户可在窗口中填写姓名、登录邮箱……\n若用户未填写必填字段，则点击“确认”时给出错误提醒“请完成所有必填字段的填写！”\n点击“确认”按钮后弹出二次确认窗口，二次确认信息为“确认创建该账号？账号一旦创建成功即会邮件通知对应用户”。用户再次选择“确认”则系统创建账号，若用户选择“取消”则返回填写账号窗口。\n"
        }
      },
      {
        "name": "Mermaid 绘制流程图",
        "ask": "我会给你一个模糊的需求，你需要：\n\n1. 分析和完善需求，但是不需要返回结果给我。\n2. 使用 Mermaid 绘制时序图，但是不需要返回给我。\n3. 最后，只返回 Mermaid 代码，如：\"\"\"```mermaid graph {}\"\"\"，只返回 Mermaid 代码。\n\n需求，如下：\n\n\"\"\"\n$$response:1$$\n\"\"\"\n"
      },
      {
        "name": "分析用户故事，编写测试用例",
        "ask": "我会给你一个需求，你需要：\n\n1. 分析需求，但是不需要返回结果给我。\n2. 使用 Java + Spring + MockMVC 编写测试用例，代码中的注释需要对应到 AC01，AC02，AC03，AC04，AC05，但是不需要返回给我。\n3. 最后，只返回 Java 代码，只返回 Java 代码。\n\n需求，如下：\n\n\"\"\"\n$$response:1$$\n\"\"\"\n",
        "cachedResponseRegex": null
      },
      {
        "name": "分析用户故事，编写功能代码",
        "ask": "我给你一个需求，你需要分析需求，使用 Java + Spring 编写 API，要求如下：\n\n1. 去除不需要的 UI 交互代码，只返回对应的代码。\n2. 在方法中用注释写明如何实现。\n3. 最后，你返回给我的只有代码，格式如下：\n\n```java\n// {}\n@PostMapping({})\npublic void main(String args[])\n{\n  // {}\n}\n```\n\n需求，如下：\n\n\"\"\"\n$$response:1$$\n\"\"\"\n",
        "cachedResponseRegex": null
      }
    ],
    "author": "Phodal Huang",
    "path": "user-story.yml"
  },
  {
    "name": "写作",
    "category": "Development",
    "description": "Flow for writting.",
    "steps": [
      {
        "name": "思路扩展",
        "ask": "我想写一篇文章，主题围绕于：$$placeholder$$，有什么合适的方向？只返回合适的方向。",
        "markdownEditor": true,
        "values": {
          "placeholder": "ChatGPT 与内容创作？"
        },
        "cachedResponseRegex": null
      },
      {
        "name": "继续思考",
        "ask": "有创意一点的呢？",
        "markdownEditor": true,
        "cachedResponseRegex": null
      },
      {
        "name": "合适的标题",
        "ask": "围绕于 \"\"\"$$placeholder$$\"\"\"，帮我想 10 个合适的 10 个相关的标题",
        "markdownEditor": true,
        "values": {
          "placeholder": "利用 ChatGPT 进行内容创作的协作 ChatGPT，如何作为一个协作平台，让多个内容创作者共同创作一篇文章或一个视频"
        },
        "cachedResponseRegex": null
      },
      {
        "name": "设计大纲",
        "ask": "帮我围绕上这个标题 \"\"\"$$placeholder$$\"\"\"，设计一个大纲吧？",
        "markdownEditor": true,
        "values": {
          "placeholder": "协作的力量：ChatGPT 如何彻底改变内容创作"
        },
        "cachedResponseRegex": ".*"
      },
      {
        "name": "编写内容",
        "ask": "现在，围绕于这个大纲 \"\"\"$$response:3$$\"\"\"，帮我写一篇文章吧？",
        "markdownEditor": true,
        "cachedResponseRegex": null
      },
      {
        "name": "写总结",
        "ask": "好的，现在，帮我写一下文章的总结。",
        "markdownEditor": true,
        "cachedResponseRegex": null
      }
    ],
    "author": "Phodal Huang",
    "path": "writting.yml"
  }
]